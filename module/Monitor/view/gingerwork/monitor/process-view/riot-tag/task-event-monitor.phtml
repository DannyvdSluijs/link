<div class="{ list-group-item: true, event-container: true, text-info: isInfoEvent(), text-warning: isWarningEvent(), text-danger: isErrorEvent() }">
    <div class="row">
        <div class="col-xs-12 col-md-7">
            { getDescription() }
        </div>
        <div class="col-xs-10 col-md-4">
            { event.occurred_on }
        </div>
        <div class="col-xs-2 col-md-1">
            <a if="{ isLogEvent() }" href="#" class="btn btn-sm btn-default log-message-details-toggle" onclick="{ toggleLogMessageDetails }"><span class="glyphicon glyphicon-arrow-down"></span></a>
        </div>
    </div>
    <div if="{ isLogEvent() }" class="row log-message-details hidden">
        <div class="col-md-12">
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {
        this.event = context.event;

        this.toggleLogMessageDetails = function () {

            $(this.root).find(".log-message-details-toggle")
                .toggleClass("active")
                .children(".glyphicon")
                .toggleClass("glyphicon-arrow-down glyphicon-arrow-up")
                .closest(".event-container")
                .children(".log-message-details").slideToggle(500);
        };

        this.isInfoEvent = function () {
            switch (this.event.name) {
                case "ProcessWasSetUp":
                case "TaskEntryMarkedAsRunning":
                case "TaskEntryMarkedAsDone":
                    return true;
                default:
                    return false;
            }
        }

        this.isWarningEvent = function () {
            return false;
        };

        this.isErrorEvent = function () {
            switch (this.event.name) {
                case "TaskEntryMarkedAsFailed":
                    return true;
                case "LogMessageReceived":
                    return this.__getLogMessageCode() >= 400;
                default:
                    return false;
            }
        }

        this.isLogEvent = function () {
            return this.event.name == "LogMessageReceived";
        }

        this.getDescription = function () {
            switch (this.event.name) {
                case "ProcessWasSetUp":
                    return '<?php echo $this->translate('Task was started')  ?>';
                case "TaskEntryMarkedAsRunning":
                    return '<?php echo $this->translate('Process was started')  ?>';
                case "TaskEntryMarkedAsDone":
                    return '<?php echo $this->translate('Task successfully done')  ?>';
                case "TaskEntryMarkedAsFailed":
                    return '<?php echo $this->translate('Task failed')  ?>';
                case "LogMessageReceived":
                    return this.__logMessageDescription(this.__getLogMessageCode());
                default:
                    return '<?php echo $this->translate('Unknown event logged: ')  ?>';
            }
        }


        this.getLogMessageDetails = function () {
            switch (this.__getLogMessageCode()) {
                case 500:
                    return this.__getSystemErrorDetails();
                default:
                    return this.__getTechnicalLogMsg();
            }
        }

        this.__logMessageDescription = function (logMessageCode) {
            switch (logMessageCode) {
                case 500:
                    return '<?php echo $this->translate('A system error occurred!')  ?>';
                default:
                    return '<?php echo $this->translate('Unknown log message received with msg code: ')  ?>' + logMessageCode;
            }
        }

        this.__getLogMessageCode = function () {
            return this.event.payload.message.payload.msgCode;
        }

        this.__getSystemErrorDetails = function () {
            var payload = this.event.payload.message.payload;

            return '<p><strong>Error:</strong></p>' +
                    '<p>' + payload.technicalMsg + '</p>' +
                    '<p><strong>TRACE: </strong></p>' +
                    '<pre>' + payload.msgParams.trace + '</pre>';
        }

        this.__getTechnicalLogMsg = function () {
            return this.event.payload.message.payload.technicalMsg;
        }

        this.on("mount", function () {
            if (this.isLogEvent()) {
                $(this.root).find(".log-message-details").hide().removeClass("hidden")
                    .find("div").html(this.getLogMessageDetails());
            }
        })
    }
</script>