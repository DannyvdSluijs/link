<div class="row">
    <div id="app" class="col-md-12">
        <h1><?php echo $this->translate('Process Manager') ?></h1>
        <script type="text/x-handlebars" data-template-name="manager">
            {{outlet}}
        </script>
    </div>
</div>
<?php echo $this->partial('process-config/process-manager/partial/manager-index.phtml') ?>
<?php echo $this->partial('process-config/process-manager/partial/create-process.phtml') ?>
<?php echo $this->partial('process-config/process-manager/partial/edit-process.phtml') ?>
<?php

$this->layout()->sidebar_left = $this->partial('process-config/process-manager/partial/sidebar-left');

$this->inlineScript()->appendFile($this->basePath() . '/js/handlebars.js');
$this->inlineScript()->appendFile($this->basePath() . '/js/ember.js');
$this->inlineScript()->appendFile($this->basePath() . '/js/ember.data.js');

$linearProcessValue = \Ginger\Processor\Definition::PROCESS_LINEAR_MESSAGING;
$foreachProcessValue = \Ginger\Processor\Definition::PROCESS_PARALLEL_FOR_EACH;

//Bootstrap ember app
$this->inlineScript()->captureStart();

$apiUrl = ltrim($this->url('process_config/api'), '/');

$possibleGingerTypes = json_encode($this->possible_ginger_types);
$possibleTaskTypes = json_encode($this->possible_task_types);
$connectors = json_encode($this->connectors);
echo <<<JS
window.ProcessManager = Ember.Application.create({
    rootElement : '#app'
});

DS.RESTAdapter.reopen({
  namespace : '{$apiUrl}'
});

ProcessManager.ApplicationAdapter = DS.FixtureAdapter.extend();

//Route Config
ProcessManager.Router.map(function() {
    this.resource('manager', { path: '/' }, function() {
        this.route('create');
        this.resource('process', {path: '/process/:process_id'}, function() {
            this.resource('tasks', function () {
                this.resource('task', {path: '/:task_id'})
            });
            this.route('edit');
        });
    });
});

ProcessManager.ManagerRoute = Ember.Route.extend({
    model: function () {
        {$this->emberPushToStore('process', $this->processes)}

        return this.store.all('process');
    }
});

ProcessManager.ManagerIndexRoute = Ember.Route.extend({
    model : function () {
        return this.modelFor('manager');
    }
});

ProcessManager.ManagerCreateRoute = Ember.Route.extend({
    model : function () {
        return {
            processTypes : [
                {
                    value : "{$linearProcessValue}",
                    label : "{$this->translate('Linear Process')}"
                },
                {
                    value : "{$foreachProcessValue}",
                    label : "{$this->translate('Foreach Process')}"
                }
            ],
            messageTypes : [
                {
                    value : "collect-data",
                    label : "{$this->translate('Collect Data Message')}"
                },
                {
                    value : "data-collected",
                    label : "{$this->translate('Data Collected Message')}"
                }
            ],
            dataTypes : $possibleGingerTypes
        }
    }
});
ProcessManager.ProcessRoute = Ember.Route.extend({
    renderTemplate : function () {
        this.render('process');
        this.render(
            'process.tasks',
            {
                into: 'process',
                outlet: 'leftpanel'
            }
        );
    }
});
ProcessManager.ProcessEditRoute = Ember.Route.extend({
    renderTemplate : function () {
        this.render(
            'process.edit',
            {
                into: 'process',
                outlet: 'leftpanel'
            }
        );
    }
});

ProcessManager.TaskRoute = Ember.Route.extend({
    model : function(params) {
        var process = this.modelFor('process');
        return process.get('tasks')[parseInt(params.task_id) - 1];
    },
    setupController: function(controller, model) {
        controller.set('model', model);
        controller.set('taskTypes', {$possibleTaskTypes});
        controller.set('connectors', []);
    },
    renderTemplate : function () {
        this.render(
            'task',
            {
                into : 'process',
                outlet: 'leftpanel'
            }
        )
    }
});
JS;
$this->inlineScript()->captureEnd();
$this->inlineScript()->appendFile($this->basePath() . '/js/app/process-manager-components.js');
?>